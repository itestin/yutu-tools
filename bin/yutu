#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var Yutu = require('../');

var pkg = require('../package.json');

// 控制日志格式化打印
var rawStdoutWrite = process.stdout.write;
fs.writeFileSync('yutu.log', '')
process.stdout.write = function(string, encoding, fileDescriptor) {
    var nocolor = string.replace(/(\[\d+[mdc]|\[K)/gi, '');
    fs.appendFileSync('yutu.log', nocolor)
    rawStdoutWrite.apply(process.stdout, arguments);
}

console.log(("Yutu "+pkg.version).green);
console.log('');
console.log('------------------------------------------------------------------\n'.green);

// 命令支持的参数
program
    .version(pkg.version)
    .option('--no-color', '控制台不显示颜色')
    .option('-d --debug', 'debug模式')
    .option('-r --raw', '保存全部命令')
    .option('--main_client [value]', '主控浏览器信息,例：chrome:106')
    .option('--sync [value]', '同步浏览器列表,例：chrome:100,firefox:104,internet_explorer:11')
    .option('--hub_host [value]', '远程浏览器服务器地址')
    .option('--hub_port [value]', '远程浏览器服务器端口')
    .option('--server_ip [value]', '同步控制设备的ip（使用远程浏览器时需要，默认为本地127.0.0.1）')
    .option('--browser_size [value]', '窗口大小，默认1024x768')
    .option('--http_proxy [value]', '远程浏览器http代理')
    .option('--default_url [value]', '默认起始地址')

let cmd = null;

program.command('init')
    .description('Init Yutu config file')
    .action(function(){
        cmd = 'init';
        Yutu.init();
    });

program.command('start')
    .description('Start recorder')
    .action(function(){
        cmd = 'start'
        Yutu.start({
            debug: program.debug,
            raw: program.raw,
            browserSize: program.browser_size,
            httpProxy: program.http_proxy,
            defaultUrl: program.default_url,
        });
    });

program.parse(process.argv);
Yutu.checkUpdate();

if(cmd === null){
    var rootPath = getRootPath();
    var configPath = 'config.json';
    var configFile = path.resolve(rootPath + '/' + configPath);

    if(fs.existsSync(configFile)){
        Yutu.start({
            debug: program.debug,
            raw: program.raw,
            browserSize: program.browser_size,
            httpProxy: program.http_proxy,
            defaultUrl: program.default_url,
        });
    }else {
        console.log(configPath.bold+' '+__('file_missed').red);
        console.log('');
        Yutu.init();
    }
}
function getRootPath(){
    var rootPath = path.resolve('.');
    while(rootPath){
        if(fs.existsSync(rootPath + '/config.json')){
            break;
        }
        rootPath = rootPath.substring(0, rootPath.lastIndexOf(path.sep));
    }
    return rootPath;
}
